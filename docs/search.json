[
  {
    "objectID": "posts/2024/engitec-apresentacao/index.html",
    "href": "posts/2024/engitec-apresentacao/index.html",
    "title": "Apresentação no 14º Engitec",
    "section": "",
    "text": "Associação entre as palavras de uma frase e suas respectivas entidades\n\n\nNo dia 05 de junho de 2024 eu fiz uma apresentação remota no 14º Encontro do Grupo Interlegis de Tecnologia, o EnGITEC.\nO tema do encontro desse ano foi Legislativo Inteligente, e eu fiz uma apresentação sobre Inteligência Artifical, dando uma ideia sobre como é o desenvolvimento de um modelo de Aprendizado de Máquina (Machine Learning).\nO objetivo principal aqui foi apresentar um exemplo prático de como é feito o desenvolvimento de um modelo supervisionado de IA. Para tanto, eu abordei um problema de Reconhecimento de Entidades Nomeadas em proposições legislativas.\nEssa tarefa consiste em identificar de forma automática entidades como nomes de pessoas, organizações, valores monetários, em um documento.\nAbaixo, eu disponibilizo os slides da apresentação e o código do projeto apresentado.\n\nSlides da apresentação\nRepostitório com o código do projeto apresentado\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/2023/matplotlib-subplots/index.html",
    "href": "posts/2023/matplotlib-subplots/index.html",
    "title": "Vários gráficos em uma única figura com Matplotlib",
    "section": "",
    "text": "Quando fazemos Análise Exploratória dos Dados, talvez queiramos analisar a distribuição univariada dos atributos presentes em um conjunto de dados.\nPodemos utilizar a técnica small multiplus para criar pequenos gráficos, uma para cada atributo, para compor a nossa figura. Esse subgráficos são, para o matplotlib os subplots.\nExistem vários meios para construir vários gráficos em uma mesma figura que a princípio, nem eu mesmo sabia. Primeiro vamos importar a biblioteca.\nfrom matplotlib import pyplot as plt"
  },
  {
    "objectID": "posts/2023/matplotlib-subplots/index.html#utilizando-a-função-plt.subplot",
    "href": "posts/2023/matplotlib-subplots/index.html#utilizando-a-função-plt.subplot",
    "title": "Vários gráficos em uma única figura com Matplotlib",
    "section": "Utilizando a função plt.subplot",
    "text": "Utilizando a função plt.subplot\nSabemos que os diferentes subplots que compõe uma figura podiam ser acessados utilizando a sintaxe . A funçãoplt.subplot` aceita que esses valores de linhas, colunas e indexes seja passado de duas formas:\n\n# plt.subplot(rows columns index)\nplt.subplot(221) # todo mundo junto\n\n# ... código do gráfico 1 aqui ...\n\nplt.subplot(2, 2, 2) # todo mundo separado\n\n# ... código do gráfico 2 aqui ...\n\n\n\n\n\n\n\n\nEsse comando significa que estamos criando uma figura com 2 linhas e 2 colunas (2 x 2 = 4 gráficos) e estamos acessando (retornando) o primeiro, o segundo, o terceiro ou o quarto gráfico, isto é, o gráfico correspondente ao valor de index.\nEsse é o exemplo presente na documentação do matplotlib:\n\nimport numpy as np\n\ndef f(t):\n    return np.exp(-t) * np.cos(2*np.pi*t)\n\n\nt1 = np.arange(0.0, 5.0, 0.1)\nt2 = np.arange(0.0, 5.0, 0.02)\n\nplt.figure()\nplt.subplot(211)\nplt.plot(t1, f(t1), color='tab:blue', marker='o')\nplt.plot(t2, f(t2), color='black')\n\nplt.subplot(212)\nplt.plot(t2, np.cos(2*np.pi*t2), color='tab:orange', linestyle='--')\nplt.show()"
  },
  {
    "objectID": "posts/2023/matplotlib-subplots/index.html#utilizando-plt.subplots",
    "href": "posts/2023/matplotlib-subplots/index.html#utilizando-plt.subplots",
    "title": "Vários gráficos em uma única figura com Matplotlib",
    "section": "Utilizando plt.subplots",
    "text": "Utilizando plt.subplots\nSim, subplots no plural!\nJá a função plt.subplots também aceita como parâmetros o número de linhas e o número de colunas da nossa figura, porém ela retorna dois objetos: um objeto do tipo Figure e um array de Axes.\nNo exemplo a seguir, é criado uma nova figura com dois gráficos, alinhados em uma linha e duas colunas. O array de Axes é desempacotado (unpacked) já na chamada da função.\n\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\n\n\n\n\n\n\n\nEsse comando cria dois gráficos lado à lado, conforme mostrado na figura.\nNesse outro exemplo, é criado uma figura com quatro gráficos, distribuídos num grid de 2x2.\n\nfig, axs = plt.subplots(2, 2)\n\n\n\n\n\n\n\n\nA variável axs retonarda nesse caso, nada mais é que um array do numpy\n\nprint(type(axs), axs.shape)\n\n&lt;class 'numpy.ndarray'&gt; (2, 2)\n\n\nE é aqui que temos a nossa dica mágica.\nComo a variável axs é um array do numpy, então nós podemos utilizar o método flatten para transformar esse array com mais de uma dimensão em um array unidimensional.\nImagine, por exemplo, que tenhamos uma dataframe com nove atributos numéricos e nós queremos analisar analisar a distribuição desses atributos separadamente.\nPodemos então utilizar um padrão de código como o do exemplo a seguir:\n\nfrom sklearn.datasets import fetch_california_housing\n\ncalifornia_housing = fetch_california_housing(as_frame=True)\ndf = california_housing.frame\n\nfig, axs = plt.subplots(ncols=3, nrows=3, figsize=(12, 10))\naxs = axs.flatten()\n\nfor col, ax in zip(df.columns, axs):\n    ax.hist(df[col], bins=50, edgecolor=\"black\")\n    ax.set_title(col)\n\nplt.tight_layout()\n\n\n\n\n\n\n\n\nEu vi esse padrão de código nesse notebook do kaggle, que é parecido com esse outro aqui!\nE a minha “contribuição” foi usar o enumerate ali… rsrs\nMaravilha, né?"
  },
  {
    "objectID": "posts/2023/matplotlib-subplots/index.html#referências",
    "href": "posts/2023/matplotlib-subplots/index.html#referências",
    "title": "Vários gráficos em uma única figura com Matplotlib",
    "section": "Referências",
    "text": "Referências\nDocumentação ofical do Matplotlib. matplotlib.pyplot.subplot. Disponível em https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplot.html Acessado em 24 de fev. de 2023.\nDocumentação ofical do Matplotlib. matplotlib.pyplot.subplots. Disponível em https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html Acessado em 24 de fev. de 2023.\nDocumentação oficial do NumPy. numpy.ndarray.flatten. Disponível em https://numpy.org/doc/stable/reference/generated/numpy.ndarray.flatten.html Acessado em 24 de fev. de 2023."
  },
  {
    "objectID": "posts/2022/meu-blog-com-pelican/index.html",
    "href": "posts/2022/meu-blog-com-pelican/index.html",
    "title": "Como criar um blog com Pelican?",
    "section": "",
    "text": "Pelican é um gerador de site estático escrito em Python. Essa ferramenta tem por objetivo criar e gerenciar um pequeno blog como é esse que você está lendo. Ou seja, não é uma ferramenta para criar documentação de projetos de software, como tantas outras ferramentas existentes por aí.\nOs artigos podem ser escritos em arquivos na extensão Markdown ou reStructuredText. A própria ferramenta converte esses arquivos para páginas web (html) com os estilos e formatações definidas pelo tema escolhido. Também é possível utilizar outras extensões de arquivos (como .ipynb) com o uso de plugins.\nNeste artigo, reconstruírei o passo-a-passo que eu utilizei para construir o meu blog.\nEntretanto, antes de instalar o Pelican, talvez você queira saber dos problemas existentes com esse framework."
  },
  {
    "objectID": "posts/2022/meu-blog-com-pelican/index.html#configurar-o-ícone-do-site",
    "href": "posts/2022/meu-blog-com-pelican/index.html#configurar-o-ícone-do-site",
    "title": "Como criar um blog com Pelican?",
    "section": "Configurar o ícone do site",
    "text": "Configurar o ícone do site\nFavicon são aqueles ícones que identificam um site nas guias do navegador ou então na barra de endereços. Você pode saber mais sobre eles nessa página da Wikipedia.\nPara gerar os arquivos necessários, você pode utilizar um gerador de favicon existente na internet. Tudo o que você precisa é uma imagem base e o gerador vai gerar todos os arquivos necessários. No meu caso, o gerador também criou ícones adicionais para outras plataformas e de diferentes tamanhos, tudo a partir de uma única imagem base.\nEXTRA_PATH_METADATA = {\n    \"extras/android-chrome-192x192.png\" : { \"path\" : \"android-chrome-192x192.png\"},\n    \"extras/android-chrome-512x512.png\" : { \"path\" : \"android-chrome-512x512.png\"},\n    \"extras/browserconfig.xml\" : {\"path\" : \"browserconfig.xml\"},\n    \"extras/apple-touch-icon.png\" : { \"path\" : \"apple-touch-icon.png\"},\n    \"extras/favicon-16x16.png\" : { \"path\" : \"favicon-16x16.png\"},\n    \"extras/favicon-32x32.png\" : { \"path\" : \"favicon-32x32.png\"},\n    \"extras/favicon.ico\": {\"path\": \"favicon.ico\"},\n    \"extras/mstile-150x150.png\" : {\"path\" : \"mstile-150x150.png\"},\n    \"extras/safari-pinned-tab.svg\" : {\"path\" : \"safari-pinned-tab.svg\"},\n    \"extras/site.webmanifest\" : {\"path\" : \"site.webmanifest\"},\n    \"extras/README.md\" : {\"path\" : \"README.md\"}\n}\nA variável EXTRA_PATH_METADATA é um dicionário onde a chave indica a localização do arquivo em relação a pasta content.Os valores são outros dicionários python, mas no fim das contas eles representam a localização dos arquivos em relação a pasta output e o nome final do arquivo.\nComo eu utilizo o GitHub Pages para publicar o meu site, eu também adicionei um arquivo README.md para aparecer na descrição do repositório no Github do meu blog."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Sobre",
    "section": "",
    "text": "Finley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending time unicycling and playing with her pet iguana."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Sobre",
    "section": "Education",
    "text": "Education\nUniversity of California, San Diego | San Diego, CA PhD in Mathematics | Sept 2011 - June 2015\nMacalester College | St. Paul MA B.A in Economics | Sept 2007 - June 2011"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Sobre",
    "section": "Experience",
    "text": "Experience\nWengo Analytics | Head Data Scientist | April 2018 - present\nGeoScynce | Chief Analyst | Sept 2012 - April 2018\n\nThis content appears below the formatted about page content."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Postagens",
    "section": "",
    "text": "Migrando meu blog\n\n\n\n\n\nAgora utilizando o framework quarto para escrever e gerenciar o conteúdo\n\n\n\n\n\n07.09.2024\n\n\nGiliard Godoi\n\n\n\n\n\n\n\n\n\n\n\n\nApresentação no 14º Engitec\n\n\n\n\n\nFalando um pouco sobre desenvolvimento de modelos de IA com um exemplo prático sobre Entidades Nomeadas\n\n\n\n\n\n05.06.2024\n\n\nGiliard Godoi\n\n\n\n\n\n\n\n\n\n\n\n\nGuia rápido para a biblioteca configparser\n\n\n\n\n\nManipulação de arquivos de configuração do tipo config.ini e config.cfg\n\n\n\n\n\n26.05.2024\n\n\nGiliard Godoi\n\n\n\n\n\n\n\n\n\n\n\n\nUma análise sobre a violência doméstica no Norte Pioneiro Paranaense\n\n\n\n\n\nDesde a extração dos dados de arquivos em PDF, até a produção de alguns gráficos mostrando a evolução de casos em Municípios da Região\n\n\n\n\n\n04.08.2023\n\n\nGiliard Godoi\n\n\n\n\n\n\n\n\n\n\n\n\nVários gráficos em uma única figura com Matplotlib\n\n\n\n\n\nComo gerar vários gráficos em uma mesma figura com subplots e no final uma dica especial.\n\n\n\n\n\n25.02.2023\n\n\nGiliard Godoi\n\n\n\n\n\n\n\n\n\n\n\n\nComo criar um blog com Pelican?\n\n\n\n\n\nDa definição do ambiente até a instalação de temas.\n\n\n\n\n\n26.12.2022\n\n\nGiliard Godoi\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "posts/2023/analise-dados-violencia-domestica-norte-pioneiro/index.html",
    "href": "posts/2023/analise-dados-violencia-domestica-norte-pioneiro/index.html",
    "title": "Uma análise sobre a violência doméstica no Norte Pioneiro Paranaense",
    "section": "",
    "text": "A Câmara Municipal de Santo Antônio da Platina solicitou à Secretaria de Segurança Pública do Estado do Paraná dados sobre casos de violência doméstica e contra a mulher.\nNormalmente essas solicitações são respondidas em formatos que facilitam a leitura por uma pessoa, mas dificultam a leitura de forma automática por uma máquina. No entanto, esses arquivos fechados impedem que outras análises sejam feitas, aplicando técnicas estatísticas ou de visualização de dados.\nNão diferente, a resposta para essa solicitação foi encaminhada na forma de um relatório em formato PDF. Para extrair os dados necessários então podemos utilizar alguns softwares especializados na extração de dados tabulares como o Tabula. Esse software permite extrair os dados dos arquivos em PDF para formatos abertos e que podem ser manipulados como o formato CSV (Comma-separated Values).\nAs instruções para instalação e operação desse software podem ser encontradas na sua página da documentação oficial.\nApós executar o programa, só precisamos selecionar o arquivo em PDF e selecionar ou ajustar a área em que está a sua tabela se encontra no arquivo, conforme ilustrado a seguir\n\n\n\nExemplo do software Tabula\n\n\nClicando no botão Preview and Export Extracted Data é gerado uma visualização com os dados extraídos.\n\n\n\nDados extraidos com o software tabula\n\n\nArquivos no formato CSV nada mais são que arquivos de textos possuem seus valores separados por um caracter delimitador, nesse caso a vírgula.\nPor exemplo, digamos que tenhamos salvo os dados no arquivo tabela-03-dados.csv. Agora é possível realizar a leitura desses dados em um código da linguagem Python utilizando, por exemplo, a biblioteca Pandas, conforme o exemplo a seguir:\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nanos = [f'20{x}' for x in range(16,21)]\n\ndf = pd.read_csv('tabela-03-dados.csv')\nTambém é possível utilizar essa biblioteca para realizar algumas modificações quanto a estrutura da tabela que os nossos dados estão organizados.\ndf = df.drop(columns=['TOTAL'])\ndf[anos] = df[anos].astype(int)\n\ndf2 = df.melt(\n    id_vars=[\"MUNICÍPIO\"],\n    value_vars=anos,\n    var_name=\"ANO\",\n    value_name='value')\n\ndf2.head()\nO código a seguir cria um gráfico de linha que mostra a evolução do casos de registro de casos de violência doméstica para os Municípios da Região do Norte Pioneiro Paranaense, entre os anos de 2016 a 2020, destacando os Municípios de Jacarezinho e Santo Antônio da Platina.\nselect = (df2['MUNICÍPIO'] == \"SANTO ANTONIO DA PLATINA\") | (df2['MUNICÍPIO'] == \"JACAREZINHO\")\n\nfig = plt.figure(figsize=(15,7))\ng = sns.lineplot(data=df2[~select],\n                 x=\"ANO\",\n                 y=\"value\",\n                 units=\"MUNICÍPIO\",\n                 estimator=None,\n                 markers=True,\n                 color=\".7\",\n                 linewidth=1,\n                 legend= False)\n\ng4 = sns.lineplot(data=df2[select],\n                  x=\"ANO\",\n                  y=\"value\",\n                  hue=\"MUNICÍPIO\",\n                  markers=True,\n                  dashes=False,\n                  legend=True)\n\nsns.despine(right=True, left=True)\nplt.ylabel(\"Quantidade\")\nplt.xlabel(\"Ano\");\n\n\n\nRegistro de violência doméstica no Norte Pioneiro\n\n\nNo eixo vertical (eixo Y) temos representado a quantidade de casos, enquanto que no eixo horizontal (eixo X) são representados os anos de 2016 à 2020. Os municípios de Jacarezinho e Santo Antônio da Platina estão destacados, enquanto os demais municípios do Norte Pioneiro estão representados por linhas cinza-claro.\nCom essa representação é possível observar que o município de Jacarezinho se destaca entre os demais. A razão para tanto, pode ser que este é o único município da região que possui uma Delegacia Especial da Mulher.\nNesse cenário, podemos levantar a hipótese se existe uma subnotificação dos casos de violência doméstica nos demais municípios que não contam com uma unidade especializada para atender a esses casos.\n\nAviso\n\nAs opiniões expressas nesse artigo são somente minhas, e não refletem necessáriamente a opinião de instituições ou pessoas eventualmente citadas nesse artigo.\n\n\n\nReferências\nCâmara de Santo Antônio da Platina. Requerimento nº 598 de 2020. Disponível em: https://sapl.santoantoniodaplatina.pr.leg.br/materia/2613. Último acesso em 07 de abr. de 2024.\nTabula Oficial Webpage. https://tabula.technology/\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/2024/configparser-guia-rapido/index.html",
    "href": "posts/2024/configparser-guia-rapido/index.html",
    "title": "Guia rápido para a biblioteca configparser",
    "section": "",
    "text": "Mind Map\n\n\nExistem várias especificações para arquivos de configuração ou parametrização, tais como os arquivos ini, yaml, e toml. Cada uma dessas especificações define uma forma de organizar as informações e representar tipos comuns das linguagens de programação como inteiros (int), números de ponto flutuante (float), valores booleanos (bool), strings, e até mesmo estruturas de dados como listas e dicionários.\nNessa postagem vamos conhecer um pouco sobre a biblioteca padrão da linguagem Python para manipular arquivos ini, a biblioteca configparser.\nEssa especificação foi inicialmente projetadas para sistemas do Microsoft Windows, porém, com o tempo, passou a ser adotada por outras empresas, aparecendo inclusive em softwares open source sob a extensão cfg.\nVamos cobrir algumas funcionalidades básicas dessa biblioteca e, para um entendimento mais detalhado, o leito interessado poderá consultar a documentação oficial da bibliotecaconfigparser.\n\nDefinição do arquivo\nO arquivo de configuração ini é organizado por seções, representada por uma palavra entre colchetes. Todo arquivo possui uma seção default que vem no início do arquivo. Os parâmetros são definidos sob o esquema chave e valor em cada uma das seções.\nAs principais características desse formato são:\n\nPodem ser utilizados como delimitadores de valor os caracteres ‘=’ ou ‘:’.\nComentários são precedidos pelo caracter ‘#’\nTodos os valores são convertidos para string, e por padrão não existe a conversão dos valores para tipos básicos da linguagem.\nPorém, existem alguns métodos especiais para converter os valores para determinado tipo;\nAo realizar o parse de um arquivo, a estrutura de dados retornados se assemelha a um dicionário do Python.\n\nA seguir, é mostrado um exemplo de como um arquivo de configuração é definido\n\nconfiguration_string = '''\n[DEFAULT]\nname  = Giliard Godoi\nemail = ggodoi@email.com\nlocal = Brasil\nsecret_agent = True\nyear = 2020\n\n# Isso é um comentário\n\n[education]  # Define-se uma nova seção com colchetes\nschool = Federal University of Technology - Paraná\nmajor  = Software Development\nyear   = 2018\n\n# This is a list of skills\n[skills]\nprograming :\n    Python\n    JavaScript\n    C\n    C++\n\nlanguage :\n    Portuguese\n    English\n'''\n\nPara manipular esse arquivo, vamos fazer a importação da biblioteca.\n\nimport configparser\n\nDepois instanciamos um objeto do tipo ConfigParser, porém ele ainda está vazio, isto é, sem campos ou valores definidos.\n\nconfig = configparser.ConfigParser()\n\ntype(config)\n\nconfigparser.ConfigParser\n\n\nA partir do objeto config, podemos realizar o parse de uma string de configuração da seguinte maneira, populando as suas seções e valores.\n\n\nconfig.read_string(configuration_string)\n\ntype(config)\n\nconfigparser.ConfigParser\n\n\nCada seção é acessível pelo seu nome, de forma semelhante a um dicionário.\n\n# O que é uma seção?\nconfig['DEFAULT']\n\n&lt;Section: DEFAULT&gt;\n\n\nO método sections retorna quais as seções definidas pelo arquivo. No nosso exemplo temos as seções education e skills. Note que a seção DEFAULT não é retornada.\n\n# Como saber quais são as demais seções?\nconfig.sections()\n\n['education', 'skills']\n\n\nTambém é possível verificar se uma seção existe em um arquivo de configuração pelo método has_section ou pelo o operator in.\n\n# Como verificar se uma seção existe dentro de config?\n('education' in config) or config.has_section('education')\n\nTrue\n\n\nPara conhecer quais os parâmetros de uma seção, podemos utilizar o método options passando o nome de uma seção.\n\nconfig.options('education')\n\n['school', 'major', 'year', 'name', 'email', 'local', 'secret_agent']\n\n\nMas se utilizarmos esse método para tentar descobrir as opções da seção DEFAULT nós obtemos um erro\n\ntry:\n    config.options('DEFAULT')\nexcept Exception as e:\n    print(type(e), e)\n\n&lt;class 'configparser.NoSectionError'&gt; No section: 'DEFAULT'\n\n\nIsso porque a seção default serve como um default. Isto é, se procurarmos uma opção em uma das seções e essa opção não estiver definida para aquela seção, o valor retornado será aquele presente na seção DEFAULT. Veja o exemplo a seguir:\n\nprint(\n    config.get('education', 'year'),\n)\nprint(\n    config.get('skills', 'year') # não foi definido a opção year nesta seção\n)\n\n2018\n2020\n\n\nPorém, o método defaults retorna um dicionário contendo os parâmetros e respectivos valores presentes nessa seção.\n\nconfig.defaults()\n\n{'name': 'Giliard Godoi',\n 'email': 'ggodoi@email.com',\n 'local': 'Brasil',\n 'secret_agent': 'True',\n 'year': '2020'}\n\n\nÉ possível verificar ser uma opção foi definida em uma seção através do método has_option.\n\n# Como verificar se existe uma opção (chave) dentro de uma seção?\nconfig.has_option(section='education', option='year')\n\nTrue\n\n\nNesse método, se o valor correspondente a section for passado como None ou uma string vazia, o valor da opção definida na seção DEFAULT é retornado.\n\n# Como verificar se existe uma opção para a seção default?\nconfig.has_option(section=None, option='company')\n\nFalse\n\n\nOs valores das opções (ou parâmetros) também estão acessíveis por indexação.\n\n# Como acessar um valor na seção default?\nconfig['DEFAULT']['name']\n\n'Giliard Godoi'\n\n\n\n# Como acessar um valor em uma outra seção?\nconfig['education']['school']\n\n'Federal University of Technology - Paraná'\n\n\nTambém é definio o método get para acessar o valor definido nos parâmetros. Como parâmetros esses métodos recebem o nome da seção e da opção que queremos consultar.\n\n# ou então, utilizar o método get\nconfig.get(section='education', option='school')\n\n'Federal University of Technology - Paraná'\n\n\nÉ importante dizer que a operação de parser do arquivo de configuração .ini não realiza a conversão dos dados para tipos primitivos da linguagem. Assim, todos os valores são retornados como string.\n\n# Qual é o tipo de dado retornado por padrão?\ntype(\n    config['education']['year']\n)\n\nstr\n\n\nA lista de linguagens de programação por exemplo, são retornadas como uma string e cada valor é separado pelo caracter de quebra de linha \\n.\n\n# Isso serve também para listas?\nconfig['skills']['programing']\n\n'\\nPython\\nJavaScript\\nC\\nC++'\n\n\nPara retornar esses valores como uma lista de strings, podemos utilizar o método split, conforme o exemplo a seguir.\n\n# Como converter os valores para listas?\nconfig['skills']['programing'].split()\n\n['Python', 'JavaScript', 'C', 'C++']\n\n\nExistem alguns métodos derivados de get que realizam a conversão para tipos primitivos, sendo eles: - getint - getboolean - getfloat\n\n# Como converter o valor de uma variável para um tipo específico?\nprint(f'''\n-----------------------------------\n{config.get(section='education', option='school')} : {type(config.get(section='education', option='school'))}\n{config.getint('education', 'year')} : {type(config.getint('education', 'year'))}\n{config.getboolean('DEFAULT', 'secret_agent')} : {type(config.getboolean('DEFAULT', 'secret_agent'))}\n-----------------------------------\n''')\n\n\n-----------------------------------\nFederal University of Technology - Paraná : &lt;class 'str'&gt;\n2018 : &lt;class 'int'&gt;\nTrue : &lt;class 'bool'&gt;\n-----------------------------------\n\n\n\n\ntype(\n    config.getint('education', 'year')\n)\n\nint\n\n\n\ntype(\n    config.getboolean('DEFAULT', 'secret_agent')\n)\n\nbool\n\n\nO método get também define um parâmetro fallback que é retornado se a opção desejada não existe na seção e nem foi definida em default.\n\n# É possível definir um valor fallback nos métodos get?\nassert not config.has_option(section='company', option='name')\n\nconfig.get(section='company', option='name', fallback='Does not exist')\n\n'Does not exist'\n\n\nTambém é possível retornar um dicionário com os parâmetros e respectivos valores presentes em uma seção. Note que todos os valores discriminados na seção default também são retornados. Isso pode ser bom ou uma falha de segurança, a depender do caso.\n\n# Como obter os itens (chave-valor) para uma seção?\nconfig.items('education')\n\n[('name', 'Giliard Godoi'),\n ('email', 'ggodoi@email.com'),\n ('local', 'Brasil'),\n ('secret_agent', 'True'),\n ('year', '2018'),\n ('school', 'Federal University of Technology - Paraná'),\n ('major', 'Software Development')]\n\n\n\n# Como obter os itens (chave-valor) para a seção default?\nconfig.defaults()\n\n{'name': 'Giliard Godoi',\n 'email': 'ggodoi@email.com',\n 'local': 'Brasil',\n 'secret_agent': 'True',\n 'year': '2020'}\n\n\n\n\nArquivos\nO arquivo de configuração definido no início dessa postagem pode ser salvo passando um ponteiro de arquivo para o método write.\n\n# Como salvar as configurações em um arquivo?\nwith open('config.ini', 'w') as f:\n    config.write(f)\n\nPara ler novamente esse arquivo, podemos fazer a leitura desse arquivo através do método read.\n\n# Como ler o arquivo config.ini?\nother = configparser.ConfigParser()\nother.sections() # o arquivo está vazio\n\n[]\n\n\n\nother.read('config.ini')\n\n['config.ini']\n\n\n\nother.sections()\n\n['education', 'skills']\n\n\n\n\nReferências\n\nhttps://docs.python.org/3/library/configparser.html\nhttps://en.wikipedia.org/wiki/INI_file\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/2024/migrating-blog-to-quarto/index.html",
    "href": "posts/2024/migrating-blog-to-quarto/index.html",
    "title": "Migrando meu blog",
    "section": "",
    "text": "Por que eu decidi outro gerenciador de conteúdo?\nPor algum tempo eu usei o framework Pelican para escrever os posts e gerar as páginas em html desse site. E a experiência foi boa!\n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts.\n\n\n\n Back to top"
  },
  {
    "objectID": "templates/welcome/index.html",
    "href": "templates/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts.\n\n\n\n Back to top"
  }
]